
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 05 22:21:52 ICT 2018
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 05 22:21:52 ICT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\021\004\000\002\021\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\003\004\000\002\003\003\000\002\016\006\000\002\017" +
    "\011\000\002\017\014\000\002\014\004\000\002\031\005" +
    "\000\002\031\003\000\002\010\004\000\002\011\006\000" +
    "\002\007\010\000\002\007\012\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\006" +
    "\006\000\002\006\005\000\002\006\005\000\002\006\007" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\022\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\026\016\013\022\026\023\011\025\016\027" +
    "\007\030\021\031\027\032\017\041\031\046\015\001\002" +
    "\000\004\004\160\001\002\000\032\002\ufffd\016\ufffd\022" +
    "\ufffd\023\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\042\ufffd\046\ufffd\001\002\000\004\004\157\001" +
    "\002\000\004\046\uffe9\001\002\000\004\046\146\001\002" +
    "\000\016\013\057\043\052\044\060\045\054\046\053\047" +
    "\051\001\002\000\026\016\013\022\026\023\011\025\016" +
    "\027\007\030\021\031\027\032\017\041\031\046\015\001" +
    "\002\000\004\013\131\001\002\000\004\002\130\001\002" +
    "\000\006\013\120\015\117\001\002\000\024\016\013\022" +
    "\026\023\011\025\016\027\007\030\021\031\027\032\017" +
    "\046\015\001\002\000\004\046\uffe7\001\002\000\026\002" +
    "\001\016\013\022\026\023\011\025\016\027\007\030\021" +
    "\031\027\032\017\046\015\001\002\000\004\046\uffe8\001" +
    "\002\000\004\004\114\001\002\000\036\002\ufff9\016\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\042\ufff9\046\ufff9\001\002" +
    "\000\036\002\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\042\ufffb\046\ufffb\001\002\000\004\004\113\001\002\000" +
    "\016\013\057\043\052\044\060\045\054\046\053\047\051" +
    "\001\002\000\004\046\uffe6\001\002\000\026\016\ufff4\022" +
    "\ufff4\023\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\041\ufff4\046\ufff4\001\002\000\004\046\032\001\002\000" +
    "\004\013\033\001\002\000\004\014\034\001\002\000\004" +
    "\025\035\001\002\000\024\016\013\022\026\023\011\025" +
    "\016\027\007\030\021\031\027\032\017\046\015\001\002" +
    "\000\004\046\042\001\002\000\026\016\013\022\026\023" +
    "\011\025\016\026\041\027\007\030\021\031\027\032\017" +
    "\046\015\001\002\000\032\002\ufffe\016\ufffe\022\ufffe\023" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\042\ufffe\046\ufffe\001\002\000\026\016\ufff2\022\ufff2\023" +
    "\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\041\ufff2" +
    "\046\ufff2\001\002\000\010\004\uffee\005\uffee\015\046\001" +
    "\002\000\006\004\ufff0\005\044\001\002\000\004\046\045" +
    "\001\002\000\006\004\uffef\005\uffef\001\002\000\016\013" +
    "\057\043\052\044\060\045\054\046\053\047\051\001\002" +
    "\000\014\004\uffde\006\uffde\007\uffde\014\uffde\024\uffde\001" +
    "\002\000\036\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\014\uffda\024\uffda\033\103\034\077\035\102\036" +
    "\100\037\076\040\101\001\002\000\036\004\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\024\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002" +
    "\000\036\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\014\uffce\024\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\001\002\000\036\004\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\024\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\001\002\000" +
    "\036\004\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\014\uffd1\024\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\001\002\000\022\004\uffdf\006\uffdf\007\uffdf" +
    "\010\071\011\070\012\067\014\uffdf\024\uffdf\001\002\000" +
    "\010\004\uffe5\006\063\007\064\001\002\000\016\013\057" +
    "\043\052\044\060\045\054\046\053\047\051\001\002\000" +
    "\036\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\014\uffd2\024\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\001\002\000\010\006\063\007\064\014\062" +
    "\001\002\000\036\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\014\uffd3\024\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\001\002\000\016\013\057\043" +
    "\052\044\060\045\054\046\053\047\051\001\002\000\016" +
    "\013\057\043\052\044\060\045\054\046\053\047\051\001" +
    "\002\000\022\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\014\uffda\024\uffda\001\002\000\022\004\uffe0\006" +
    "\uffe0\007\uffe0\010\071\011\070\012\067\014\uffe0\024\uffe0" +
    "\001\002\000\016\013\057\043\052\044\060\045\054\046" +
    "\053\047\051\001\002\000\016\013\057\043\052\044\060" +
    "\045\054\046\053\047\051\001\002\000\016\013\057\043" +
    "\052\044\060\045\054\046\053\047\051\001\002\000\022" +
    "\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014" +
    "\uffdd\024\uffdd\001\002\000\022\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\014\uffdc\024\uffdc\001\002\000" +
    "\022\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\014\uffdb\024\uffdb\001\002\000\022\004\uffe1\006\uffe1\007" +
    "\uffe1\010\071\011\070\012\067\014\uffe1\024\uffe1\001\002" +
    "\000\016\013\057\043\052\044\060\045\054\046\053\047" +
    "\051\001\002\000\016\013\057\043\052\044\060\045\054" +
    "\046\053\047\051\001\002\000\016\013\057\043\052\044" +
    "\060\045\054\046\053\047\051\001\002\000\016\013\057" +
    "\043\052\044\060\045\054\046\053\047\051\001\002\000" +
    "\016\013\057\043\052\044\060\045\054\046\053\047\051" +
    "\001\002\000\016\013\057\043\052\044\060\045\054\046" +
    "\053\047\051\001\002\000\014\004\uffd8\006\uffd8\007\uffd8" +
    "\014\uffd8\024\uffd8\001\002\000\014\004\uffd9\006\uffd9\007" +
    "\uffd9\014\uffd9\024\uffd9\001\002\000\014\004\uffd4\006\uffd4" +
    "\007\uffd4\014\uffd4\024\uffd4\001\002\000\014\004\uffd6\006" +
    "\uffd6\007\uffd6\014\uffd6\024\uffd6\001\002\000\014\004\uffd7" +
    "\006\uffd7\007\uffd7\014\uffd7\024\uffd7\001\002\000\014\004" +
    "\uffd5\006\uffd5\007\uffd5\014\uffd5\024\uffd5\001\002\000\010" +
    "\004\uffed\006\063\007\064\001\002\000\036\002\ufffc\016" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\042\ufffc\046\ufffc\001" +
    "\002\000\036\002\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\042\ufff6\046\ufff6\001\002\000\026\016\013\022\026" +
    "\023\011\025\016\026\116\027\007\030\021\031\027\032" +
    "\017\046\015\001\002\000\036\002\ufff8\016\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\042\ufff8\046\ufff8\001\002\000\016" +
    "\013\057\043\052\044\060\045\054\046\124\047\051\001" +
    "\002\000\004\041\121\001\002\000\004\014\122\001\002" +
    "\000\004\004\ufff3\001\002\000\004\004\uffe3\001\002\000" +
    "\034\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\126\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\001\002\000\010\004\uffe4\006\063\007\064\001\002" +
    "\000\006\014\127\041\121\001\002\000\004\004\uffe2\001" +
    "\002\000\004\002\000\001\002\000\016\013\057\043\052" +
    "\044\060\045\054\046\053\047\051\001\002\000\010\006" +
    "\063\007\064\014\133\001\002\000\024\016\013\022\026" +
    "\023\011\025\016\027\007\030\021\031\027\032\017\046" +
    "\015\001\002\000\006\020\135\021\136\001\002\000\024" +
    "\016\013\022\026\023\011\025\016\027\007\030\021\031" +
    "\027\032\017\046\015\001\002\000\036\002\uffeb\016\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\042\uffeb\046\uffeb\001\002" +
    "\000\004\021\140\001\002\000\036\002\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\042\uffea\046\uffea\001\002\000" +
    "\026\002\uffff\016\013\022\026\023\011\025\016\027\007" +
    "\030\021\031\027\032\017\046\015\001\002\000\026\016" +
    "\ufff5\022\ufff5\023\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\041\ufff5\046\ufff5\001\002\000\010\006\063\007" +
    "\064\024\144\001\002\000\024\016\013\022\026\023\011" +
    "\025\016\027\007\030\021\031\027\032\017\046\015\001" +
    "\002\000\036\002\uffec\016\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\042\uffec\046\uffec\001\002\000\012\004\uffee\005\uffee" +
    "\013\147\015\046\001\002\000\004\014\150\001\002\000" +
    "\004\025\151\001\002\000\024\016\013\022\026\023\011" +
    "\025\016\027\007\030\021\031\027\032\017\046\015\001" +
    "\002\000\026\016\013\022\026\023\011\025\016\027\007" +
    "\030\021\031\027\032\017\042\153\046\015\001\002\000" +
    "\016\013\057\043\052\044\060\045\054\046\053\047\051" +
    "\001\002\000\010\004\155\006\063\007\064\001\002\000" +
    "\004\026\156\001\002\000\026\016\ufff1\022\ufff1\023\ufff1" +
    "\025\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\041\ufff1\046" +
    "\ufff1\001\002\000\036\002\ufffa\016\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\042\ufffa\046\ufffa\001\002\000\036\002\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\042\ufff7\046\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\032\002\013\003\011\004\007\005\004\006" +
    "\024\007\023\010\005\011\022\014\003\016\021\017\027" +
    "\021\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\042\001\001" +
    "\000\012\022\142\023\054\024\047\025\046\001\001\000" +
    "\026\004\007\005\004\006\024\007\023\010\005\011\022" +
    "\014\003\016\021\017\141\021\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\035" +
    "\005\004\006\024\007\023\010\005\011\022\014\003\016" +
    "\021\021\114\001\001\000\002\001\001\000\022\004\035" +
    "\005\037\006\024\007\023\010\005\011\022\014\003\016" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\111\023\054\024\047\025\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\035\005\004" +
    "\006\024\007\023\010\005\011\022\014\003\016\021\021" +
    "\036\001\001\000\004\031\042\001\001\000\022\004\035" +
    "\005\037\006\024\007\023\010\005\011\022\014\003\016" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\055\023\054\024\047\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\060\023\054\024" +
    "\047\025\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\074\024\064\001\001\000" +
    "\006\023\065\024\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\073\001\001\000\004\024\072\001" +
    "\001\000\004\024\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\110\001\001\000\004\024\107\001\001\000\004\024\106" +
    "\001\001\000\004\024\105\001\001\000\004\024\104\001" +
    "\001\000\004\024\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\035\005\037\006\024\007" +
    "\023\010\005\011\022\014\003\016\021\001\001\000\002" +
    "\001\001\000\014\016\122\022\124\023\054\024\047\025" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\131\023\054\024\047\025\046\001\001\000" +
    "\002\001\001\000\022\004\035\005\133\006\024\007\023" +
    "\010\005\011\022\014\003\016\021\001\001\000\002\001" +
    "\001\000\022\004\035\005\136\006\024\007\023\010\005" +
    "\011\022\014\003\016\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\035\005\037" +
    "\006\024\007\023\010\005\011\022\014\003\016\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\035" +
    "\005\144\006\024\007\023\010\005\011\022\014\003\016" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\035\005\004\006" +
    "\024\007\023\010\005\011\022\014\003\016\021\021\151" +
    "\001\001\000\022\004\035\005\037\006\024\007\023\010" +
    "\005\011\022\014\003\016\021\001\001\000\012\022\153" +
    "\023\054\024\047\025\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info)
    {
    StringBuffer m = new StringBuffer("Error");
   
    if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void sem_error(String context , String message)
    {
     	System.err.println("Semantic Error:"+ "<"+context+">" + message);
        System.exit(1);
    }

    public void type_error (String context,String message)
    {
        System.err.println("Type Error:"+ "<"+context+">" + message);
        System.exit(1);
    }

    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= BOL 
            {
              Aexp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= ID 
            {
              Aexp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= STRING_LITERAL 
            {
              Aexp RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new Aexp (sl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= FLOAT_LITERAL 
            {
              Aexp RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= INTEGER_LITERAL 
            {
              Aexp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= LPAREN expr RPAREN 
            {
              Aexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logic ::= term LTE term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aexp(new Args(t1,t2), sym.LTE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logic ::= term GTE term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aexp(new Args(t1,t2), sym.GTE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logic ::= term GT term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aexp(new Args(t1,t2), sym.GT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logic ::= term LT term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aexp(new Args(t1,t2), sym.LT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logic ::= term OR term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aexp(new Args(t1,t2), sym.OR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logic ::= term AND term 
            {
              Aexp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp t1 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t2 = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aexp(new Args(t1,t2), sym.AND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= term 
            {
              Aexp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= factor MOD term 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(new Args(f,t), sym.MOD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= factor DIVIDE term 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(new Args(f,t), sym.DIVIDE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= factor TIMES term 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp t = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(new Args(f,t), sym.TIMES); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= logic 
            {
              Aexp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp l = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= factor 
            {
              Aexp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MINUS factor 
            {
              Aexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(new Args(e,f), sym.MINUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr PLUS factor 
            {
              Aexp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp f = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aexp(new Args(e,f), sym.PLUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment ::= ID EQ ID LPAREN RPAREN 
            {
              Astat RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("This is a function call");
                    //Astat.functioncall(i2);                    
                    RESULT = Astat.functionReturn(i1,i2);                    
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= ID EQ functioncall 
            {
              Astat RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat fc = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = Astat.functioncall(i);
                     //RESULT = Astat.functionReturn(i1,i2);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment ::= ID EQ expr 
            {
              Astat RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (!Env.envTable.containsKey(i)) {parser.sem_error(i,"Variable undeclared");}
                    else
                    {
                        RESULT = Astat.assignment(i,e);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment ::= type ID EQ expr 
            {
              Astat RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                  
                  if(Env.envTable.containsKey(i)) { parser.sem_error(i,"Duplicate declaration");}
                  else
                  {
                        if (t.isInteger())
                        {
                            Env.envTable.put(i,new TypeValue(0));
                        }
                        if (t.isString())
                        {
                           
                            Env.envTable.put(i,new TypeValue(""));

                             
                        }
                        if (t.isFloating_point())
                        {
                            
                            Env.envTable.put(i,new TypeValue(0.0f));
                        }
                        if (t.isBool())
                        {
                            Env.envTable.put(i,new TypeValue(false));
                        }
                            
                         
                        RESULT = Astat.assignment(t, i , e); 

                        
                  }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type().bool();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type().string();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type().floating_point();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type().integer();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ifthen ::= IF LPAREN expr RPAREN statement ELSE statement ENDIF 
            {
              Astat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Astat s1 = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Astat s2 = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                    RESULT = Astat.ifthenelse(e,s1,s2);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifthen",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ifthen ::= IF LPAREN expr RPAREN statement ENDIF 
            {
              Astat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                  
                RESULT = Astat.ifthen(e,s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifthen",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // while ::= WHILE expr DO statement 
            {
              Astat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Astat.whileloop(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print ::= PRINT expr 
            {
              Astat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Aexp e = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Astat.print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // id_list ::= ID 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    IDList.list.add(i);
                    RESULT = IDList.list;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // id_list ::= id_list COMMA ID 
            {
              ArrayList<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> il = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    il.add(i);
                    RESULT = il;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= type id_list 
            {
              Astat RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> il = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    for(String i : il){
                        if(Env.envTable.containsKey(i)) { parser.sem_error(i,"Duplicate declaration "+i);}
                        else
                        {
                            if (t.isInteger())
                            {
                                Env.envTable.put(i,new TypeValue(0));
                            }
                            if (t.isString())
                            {

                                Env.envTable.put(i,new TypeValue(""));


                            }
                            if (t.isFloating_point())
                            {

                                Env.envTable.put(i,new TypeValue(0.0f));
                            }
                            if (t.isBool())
                            {
                                Env.envTable.put(i,new TypeValue(false));
                            }

                            RESULT = Astat.assignment(t, i);                         
                        }
                    }
                    il.clear();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functiondecl ::= type ID LPAREN RPAREN BEGIN statement_list RETURN expr SEMI END 
            {
              Astat RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lstat s = (Lstat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Aexp rv = (Aexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("This is a function declaration");
                   if(FunctionList.funTable.containsKey(i)) { parser.sem_error(i,"Duplicate function declaration");}
                   else
                        {
                            boolean b =false;
                            if(rv.getType().isInteger() && t.isInteger()){
                                b = true;
                                 Env.envTable.put(i,new TypeValue(0));
                            }else if(rv.getType().isFloating_point() && t.isFloating_point()){
                                b = true;
                                Env.envTable.put(i,new TypeValue(0.0f));
                            }else if(rv.getType().isBool() && t.isBool()){
                                b = true;
                                Env.envTable.put(i,new TypeValue(false));
                            }


                            if(b){
                                Astat st = Astat.assignment(i,rv);
                                //Lstat lt = new Lstat(s);                                
                                FunctionList.funTable.put(i,new Lstat(s,st));
                                
                            }else{
                                parser.sem_error(i,"Function return type mismatch");
                            }
                        }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functiondecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functiondecl ::= VOID ID LPAREN RPAREN BEGIN statement_list END 
            {
              Astat RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lstat s = (Lstat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("This is a function declaration");
                   if(FunctionList.funTable.containsKey(i)) { parser.sem_error(i,"Duplicate function declaration");}
                   else
                        {
                            FunctionList.funTable.put(i,s);
                        }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functiondecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functioncall ::= ID LPAREN VOID RPAREN 
            {
              Astat RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("This is a function call");
                    RESULT = Astat.functioncall(i);
                    
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_list ::= functiondecl 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat fd = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_list ::= function_list functiondecl 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat fd = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= functioncall SEMI 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= declaration SEMI 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= BEGIN statement_list END 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lstat s = (Lstat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Astat.list(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= while 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= print SEMI 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= ifthen 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= assignment SEMI 
            {
              Astat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s;
                System.out.println("This is the assignment statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= statement 
            {
              Lstat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Lstat(s);
                    System.out.println("This is the statement part");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement_list statement 
            {
              Lstat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lstat l = (Lstat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Astat s = (Astat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Lstat(l,s) ;
                    System.out.println("This is the statement list");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_list statement_list 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lstat s = (Lstat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.execute();
                   s.showStatements();
                   System.out.println("This is the total statement list");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lstat s = (Lstat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.execute();
                   s.showStatements();
                   System.out.println("This is the total statement list");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

